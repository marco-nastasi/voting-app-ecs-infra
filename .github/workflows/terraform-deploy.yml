name: 2 - Deploy plan to AWS

# Top level permissions of the workflow
permissions: {}

on:
  workflow_dispatch: # Trigger manually

jobs:
  check-plan:
    name: Check if valid plan exists
    # Check if the terraform-plan workflow was executed successfully 
    permissions:
      id-token: write
      contents: read
      actions: read

    runs-on: ubuntu-latest
    steps:
      - name: Check status of the Terraform Plan workflow
        # Script to check condition
        id: check-plan-workflow
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea
        with:
          script: |
            // Get the current commit SHA
            const currentCommitSha = context.sha;

            // Fetch the latest run of the first workflow for this commit
            const { data: runs } = await github.rest.actions.listWorkflowRuns({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'terraform-plan.yml',  // Name of the first workflow file
              branch: 'main',  // Branch to check
              event: 'push',   // Event that triggered the first workflow
              status: 'completed',
              per_page: 1,
              head_sha: currentCommitSha  // Filter by the current commit SHA
            });

            // Get the latest run
            const latestRun = runs.workflow_runs[0];

            // Check if the latest run was successful
            if (latestRun.conclusion !== 'success') {
              throw new Error(`The Terraform Plan workflow did not succeed for commit ${currentCommitSha}. Conclusion: ${latestRun.conclusion}`);
            }

            // Return the conclusion for use in subsequent steps
            return latestRun.conclusion;

  deploy:
    # Job to deploy to AWS
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: check-plan

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        # Checks-out the repository under $GITHUB_WORKSPACE, so follow-up steps can access it
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683

      - name: Setup Terraform
        # Use Terraform specific version
        uses: hashicorp/setup-terraform@b9cd54a3c349d3f38e8881555d616ced269862dd
        with:
          terraform_version: ${{ vars.TF_VERSION }}

      - name: Configure AWS OIDC credentials
        # Use Github OIDC to authenticate to AWS, assumming role
        id: configure-aws
        uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE }}
          aws-region: ${{ vars.TF_VAR_REGION }}
          mask-aws-account-id: true

      - name: Terraform Init
        # Initialize Terraform backend with custom parameters, download providers
        id: terraform-init
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.TFSTATE_BUCKET_NAME }}" \
            -backend-config="key=${{ secrets.TFSTATE_BUCKET_PATH }}" \
            -backend-config="region=${{ vars.TF_VAR_REGION }}" \
            -backend-config="dynamodb_table=${{ secrets.TFSTATE_TABLE_NAME }}"

      - name: Download plan from S3 bucket
        # Fetch saved plan from previous workflow
        id: download-plan-s3
        run: |
          aws s3 cp s3://${{ secrets.TFSTATE_BUCKET_NAME }}/plan/output.tfplan \
          output.tfplan

      - name: Terraform Apply
        # Apply downloaded plan
        id: terraform-apply
        run: |
          terraform apply -auto-approve output.tfplan